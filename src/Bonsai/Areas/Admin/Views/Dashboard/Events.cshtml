@model IReadOnlyList<Bonsai.Areas.Admin.ViewModels.Dashboard.ChangesetEventVM>

@using Bonsai.Areas.Admin.ViewModels.Common
@using Bonsai.Areas.Admin.ViewModels.Dashboard
@using Bonsai.Code.Utils.Helpers
@using Bonsai.Data.Models
@using Bonsai.Localization
@using Humanizer
@using Impworks.Utils.Strings

@{
    string GetChangeDescription(ChangesetEventVM evt)
    {
        var isFemale = evt.User.IsMale == false;
        var format = evt.ChangeType switch
        {
            ChangesetType.Created =>
                evt.EntityType == ChangesetEntityType.Media
                    ? (isFemale ? Texts.Admin_Dashboard_UploadedFormatF : Texts.Admin_Dashboard_UploadedFormatM)
                    : (isFemale ? Texts.Admin_Dashboard_CreatedFormatF : Texts.Admin_Dashboard_CreatedFormatM),
            ChangesetType.Removed => (isFemale ? Texts.Admin_Dashboard_RemovedFormatF : Texts.Admin_Dashboard_RemovedFormatM),
            ChangesetType.Updated => (isFemale ? Texts.Admin_Dashboard_UpdatedFormatF : Texts.Admin_Dashboard_UpdatedFormatM),
            ChangesetType.Restored => (isFemale ? Texts.Admin_Dashboard_RestoredFormatF : Texts.Admin_Dashboard_RestoredFormatM)
        };
        var entityType = evt.EntityType switch
        {
            ChangesetEntityType.Page => Texts.Admin_Dashboard_Page,
            ChangesetEntityType.Media => evt.ElementCount.DisplayNumeric(Texts.Admin_Dashboard_MediaFiles),
            ChangesetEntityType.Relation => Texts.Admin_Dashboard_Relation
        };
        return string.Format(format, evt.User.FullName, entityType);
    }

    string GetChangeClass(ChangesetType type) => type switch {
        ChangesetType.Created => "plus",
        ChangesetType.Removed => "times",
        ChangesetType.Updated => "pencil",
        ChangesetType.Restored => "undo"
    };

    string GetChangeDate(DateTimeOffset date)
    {
        return date < DateTimeOffset.Now.AddDays(-14)
            ? date.LocalDateTime.ToLocalizedShortDate()
            : date.Humanize().Capitalize();
    }

    string GetLink(LinkVM link)
    {
        return string.IsNullOrEmpty(link.Url)
            ? $"""<span>{link.Title}</span>"""
            : $"""<a href="{link.Url}">{link.Title}</a>""";
    }
}

@foreach (var evt in Model)
{
    var iconClass = GetChangeClass(evt.ChangeType);
    <div class="row dashboard-event">
        <div class="col-auto p-0">
            <div class="dashboard-event-image-wrapper">
                <img src="@ViewHelper.GetGravatarUrl(evt.User.Email)" class="dashboard-event-image shadow-sm" title="@evt.User.FullName" />
                <div class="dashboard-event-icon dashboard-event-icon-@(iconClass)">
                    <span class="fa fa-@(iconClass)"></span>
                </div>
            </div>
        </div>
        <div class="col p-0">
            <div class="row dashboard-event-header">
                <div class="col dashboard-event-title">
                    <h6>@GetChangeDescription(evt)</h6>
                </div>
                <div class="col-auto dashboard-event-date" title="@evt.Date.LocalDateTime.ToLocalizedFullDate()">
                    @GetChangeDate(evt.Date)
                </div>
            </div>
            <div class="dashboard-event-content">
                @if (evt.MediaThumbnails?.Count > 0)
                {
                    <ul class="list-inline dashboard-event-media">
                        @foreach (var elem in evt.MediaThumbnails)
                        {
                            <li class="list-inline-item">
                                <div class="media-thumb-wrapper">
                                    @if (evt.ChangeType == ChangesetType.Removed)
                                    {
                                        <div class="media-thumb-square" style="background-image: url('@Url.MediaUrl(elem)')"></div>
                                    }
                                    else
                                    {
                                        <a href="@Url.Action("ViewMedia", "Media", new {area = "Front", key = elem.Key})" class="media-thumb-link" data-media="@elem.Key">
                                            <div class="media-thumb-square" style="background-image: url('@Url.MediaUrl(elem)')"></div>
                                        </a>
                                    }
                                </div>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    if (evt.MainLink != null)
                    {
                        <text>@Html.Raw(GetLink(evt.MainLink))</text>
                    }
                    @if (evt.EntityType == ChangesetEntityType.Relation && evt.ExtraLinks != null)
                    {
                        <text>@Html.Raw(string.Format(Texts.Admin_Dashboard_LinkBetweenPages, GetLink(evt.ExtraLinks[0]), GetLink(evt.ExtraLinks[1])))</text>
                    }
                }
            </div>
        </div>
    </div>
}