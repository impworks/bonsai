@using Bonsai.Areas.Admin.ViewModels.Changesets
@using Bonsai.Code.Utils.Helpers
@using Bonsai.Data.Models
@using Humanizer
@using Impworks.Utils.Format
@using Impworks.Utils.Strings
@addTagHelper *, Bonsai
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@model ChangesetsListVM
@{
    ViewBag.Title = "Список правок";
    Layout = "~/Areas/Admin/Views/Layout.cshtml";

    var baseUrl = Url.Action("Index", "Changesets", new { area = "Admin" });
}

<h1>Список правок</h1>

<div class="clearfix">
    <div class="float-right">
        <form action="@baseUrl" method="GET" class="form-inline">
            @await Component.InvokeAsync("ListHiddenFilterComponent", new
            {
                request = Model.Request,
                include = new[] { nameof(ChangesetsListRequestVM.EntityId), nameof(ChangesetsListRequestVM.UserId) }
            })
            @if(Model.UserTitle != null)
            {
                @await Component.InvokeAsync("ListItemFilterComponent", new
                {
                    url = baseUrl,
                    request = Model.Request,
                    propName = nameof(ChangesetsListRequestVM.UserId),
                    title = Model.UserTitle
                })
            }
            @if(Model.EntityTitle != null)
            {
                @await Component.InvokeAsync("ListItemFilterComponent", new
                {
                    url = baseUrl,
                    request = Model.Request,
                    propName = nameof(ChangesetsListRequestVM.EntityId),
                    title = Model.EntityTitle
                })
            }
            @await Component.InvokeAsync("ListEnumFilterComponent", new
            {
                request = Model.Request,
                 propName = nameof(ChangesetsListRequestVM.ChangesetTypes)
            })
            @await Component.InvokeAsync("ListEnumFilterComponent", new
            {
                request = Model.Request,
                propName = nameof(ChangesetsListRequestVM.EntityTypes)
            })
            <input type="text" class="form-control form-control-sm mr-sm-2" name="@nameof(ChangesetsListRequestVM.SearchQuery)" value="@Model.Request.SearchQuery" placeholder="Название" />
            <button class="btn btn-sm btn-outline-secondary" type="submit">Найти</button>
        </form>
    </div>
</div>

@if(Model.Items.Any())
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th width="1px"></th>
                <th width="30%">Название</th>
                <th width="15%">Тип</th>
                <th width="20%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(ChangesetTitleVM.Date), title = "Дата" })</th>
                <th width="15%">Действие</th>
                <th width="20%">@await Component.InvokeAsync("ListHeaderComponent", new { url = baseUrl, request = Model.Request, propName = nameof(ChangesetTitleVM.Author), title = "Автор" })</th>
                <th width="1px"></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var c in Model.Items)
            {
                <tr class="admin-row">
                    <td class="admin-full-image">
                        <a href="@Url.Action("Details", "Changesets", new {area = "Admin", id = c.Id})" title="Просмотреть">
                            <div class="image" style="background-image: url('@Url.Content(c.EntityThumbnailUrl)')"></div>
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action("Details", "Changesets", new {area = "Admin", id = c.Id})" title="Просмотреть">
                            @(StringHelper.Coalesce(c.EntityTitle, "—"))
                        </a>
                    </td>
                    <td>
                        @if (c.EntityExists)
                        {
                            var editUrl = c.EntityType switch
                            {
                                ChangesetEntityType.Page => Url.Action("Update", "Pages", new { area = "Admin", id = c.EntityId }),
                                ChangesetEntityType.Media => Url.Action("Update", "Media", new { area = "Admin", id = c.EntityId }),
                                ChangesetEntityType.Relation => Url.Action("Update", "Relations", new { area = "Admin", id = c.EntityId }),
                            };
                            <a href="@editUrl">@c.EntityType.GetEnumDescription()</a>
                        }
                        else
                        {
                            <text>@c.EntityType.GetEnumDescription()</text>
                        }
                    </td>
                    <td><span title="@c.Date.LocalDateTime.ToLocalizedFullDate()">@c.Date.Humanize()</span></td>
                    <td>@c.ChangeType.GetEnumDescription()</td>
                    <td>@c.Author</td>
                    <td class="admin-row-actions">
                        @if (c.CanRevert)
                        {
                            <a href="@Url.Action("Revert", "Changesets", new {area = "Admin", id = c.Id})">
                                <span class="fa fa-history" title="Восстановить"></span>
                            </a>
                        }
                        @if (c.EntityExists)
                        {
                            var outUrl = c.EntityType switch
                            {
                                ChangesetEntityType.Page => Url.Action("Description", "Page", new { area = "Front", key = c.EntityKey }),
                                ChangesetEntityType.Media => Url.Action("Index", "Home", new { area = "Front" }) + "#media-" + c.EntityKey,
                                _ => null
                            };

                            if (outUrl != null)
                            {
                                <a href="@outUrl" target="_blank">
                                    <span class="fa fa-external-link-square" title="Просмотреть текущую версию"></span>
                                </a>
                            }
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    if(Model.Request.IsEmpty())
    {
        <div class="alert alert-info">
            Не создано ни одной правки.
        </div>
    }
    else
    {
        <div class="alert alert-info">
            По запросу не найдено ни одной правки.
        </div>
    }
}

<div class="clearfix">
    <div class="pull-right">
        @await Component.InvokeAsync("ListPaginatorComponent", new
        {
            url = baseUrl,
            request = Model.Request,
            pageCount = Model.PageCount
        })
    </div>
</div>